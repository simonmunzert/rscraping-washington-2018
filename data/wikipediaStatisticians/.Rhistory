## peparations -------------------
source("packages.r")
## construct a document-feature matrix (DFM) ---------------------
# dfm() constructs a document-feature matrix (DFM) from a tokens object
irish_toks <- tokens(data_corpus_irishbudget2010, remove_punct = TRUE)
summary(irish_toks)
irish_dfm <- dfm(irish_toks)
irish_dfm
?dfm
# dfm has many useful options
irish_dfm <- dfm(data_corpus_irishbudget2010,
tolower = TRUE,
remove_punct = TRUE,
stem = TRUE,
ngrams = 1:3
)
irish_dfm
?tokens
?tokenize
?char_wordstem
# clean up
tokens_wordstem(immig_corp)
# words
immig_corp <- corpus(data_char_ukimmig2010)
toks <- tokens(immig_corp, what = "word")
summary(toks)
toks$Labour[1:100]
# sentences
toks <- tokens(immig_corp, what = "sentence")
toks$Labour[1:10]
# clean up
toks <- tokens(immig_corp, what = "word",
remove_numbers = TRUE,
remove_punct = TRUE,
remove_hyphens = TRUE)
toks$Labour[1:10]
# clean up
tokens_wordstem(immig_corp)
toks$Labour[1:10]
# clean up
tokens_wordstem(toks$Labour[1:10])
# clean up
tokens_wordstem(tokenize(toks$Labour[1:10]))
# clean up
tokens_wordstem(tokens(toks$Labour[1:10]))
tokens(toks$Labour[1:10])
# clean up
tokens_wordstem(tokens(toks$Labour[1:10]))
toks$Labour
tokenize(toks$Labour)
# clean up
tokens_wordstem(tokens(toks$Labour[1:10]))
# clean up
tokens_wordstem(tokens(toks$Labour[1:10])) %>% unlist
char_wordstem(tokens(toks$Labour[1:10])) %>% unlist
char_wordstem(tokenize(toks$Labour[1:10])) %>% unlist
tokens_wordstem(tokens("Die Münchner essen ihre Weißwurst gerne vor Mittag")) %>% unlist
tokens_wordstem(tokens("Die Münchner essen ihre Weißwurst gerne vor Mittag"), language = "de") %>% unlist
tokens_wordstem(tokens("Die Münchner essen ihre Weißwurst gerne vor Mittag"), language = "en") %>% unlist
tokens_wordstem(tokens("Die Münchner essen ihre Weißwurst gerne vor Mittag"), language = "de") %>% unlist
tokens_wordstem(tokens("Die Münchner essen ihre Weißwürste gerne vor Mittag"), language = "de") %>% unlist
stopwords("english")
# dealing with stop words
stopwords("english")
?stopwords
stopwords("de")
stopwords("german")
?dfm
irish_dfm <- dfm(data_corpus_irishbudget2010,
remove_punct = TRUE,
remove=c(stopwords("english"), "£"), verbose=TRUE)
## preparations -----------------------
source("packages.r")
## case study 1: map breweries in Germany -------
##  goal
# get list of breweries in Germany
# import list in R
# geolocate breweries
# put them on a map
# set temporary working directory
tempwd <- ("data/breweriesGermany")
dir.create(tempwd)
setwd(tempwd)
## step 1: fetch list of cities with breweries
url <- "http://www.biermap24.de/brauereiliste.php"
browseURL(url)
content <- read_html(url)
anchors <- html_nodes(content, xpath = "//tr/td[2]")
cities <- html_text(anchors)
cities
cities <- str_trim(cities)
cities <- cities[str_detect(cities, "^[[:upper:]]+.")]
length(cities)
length(unique(cities))
sort(table(cities))
## step 2: geocode cities
# geocoding takes a while -> save results in local cache file
# 2500 requests allowed per day
if ( !file.exists("breweries_geo.RData")){
pos <- geocode(cities)
geocodeQueryCheck()
save(pos, file="breweries_geo.RData")
} else {
load("breweries_geo.RData")
}
ls()
dir()
# set temporary working directory
tempwd <- ("../data/breweriesGermany")
dir.create(tempwd)
setwd(tempwd)
# geocoding takes a while -> save results in local cache file
# 2500 requests allowed per day
if ( !file.exists("breweries_geo.RData")){
pos <- geocode(cities)
geocodeQueryCheck()
save(pos, file="breweries_geo.RData")
} else {
load("breweries_geo.RData")
}
head(pos)
## step 3: plot breweries of Germany
brewery_map <- get_map(location=c(lon = mean(c(min(pos$lon), max(pos$lon))), lat = mean(c(min(pos$lat), max(pos$lat)))), zoom=6, maptype="hybrid")
p <- ggmap(brewery_map) + geom_point(data=pos, aes(x=lon, y=lat), col="red", size=.8)
p
## return to base working drive
setwd("../code")
## return to base working drive
setwd("../../code")
# set temporary working directory
tempwd <- ("../data/wikipediaStatisticians")
dir.create(tempwd)
setwd(tempwd)
## step 1: inspect page
url <- "https://en.wikipedia.org/wiki/List_of_statisticians"
browseURL(url)
## step 2: retrieve links
html <- read_html(url)
anchors <- html_nodes(html, xpath = "//ul/li/a[1]")
links <- html_attr(anchors, "href")
links <- links[!is.na(links)]
links_iffer <-
seq_along(links) >=
seq_along(links)[str_detect(links, "Odd_Aalen")] &
seq_along(links) <=
seq_along(links)[str_detect(links, "George_Kingsley_Zipf")] &
str_detect(links, "/wiki/")
links_index <- seq_along(links)[links_iffer]
links <- links[links_iffer]
length(links)
##  step 3: extract names
names <- links %>% basename %>% sapply(., URLdecode)  %>% str_replace_all("_", " ") %>% str_replace_all(" \\(.*\\)", "") %>% str_trim
## step 4: fetch personal wiki pages
baseurl <- "http://en.wikipedia.org"
HTML <- list()
Fname <- str_c(basename(links), ".html")
URL <- str_c(baseurl, links)
# loop
for ( i in seq_along(links) ){
# url
url <- URL[i]
# fname
fname <- Fname[i]
# download
if ( !file.exists(fname) ) download.file(url, fname)
# read in files
HTML[[i]] <- read_html(fname)
}
## step 5: identify links between statisticians
# loop preparation
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//p//a"), # note: only look for links in p sections; otherwise too many links collected
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks]
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
# results
names(connections) <- c("from", "to")
head(connections)
# make symmetrical
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
connections <- connections[!duplicated(connections),]
## step 6: visualize connections
connections$value <- 1
nodesDF <- data.frame(name = names, group = 1)
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = 3)
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
## step 7: identify top nodes in data frame
nodesDF$id <- as.numeric(rownames(nodesDF)) - 1
connections_df <- merge(connections, nodesDF, by.x = "to", by.y = "id", all = TRUE)
to_count_df <- count(connections_df, name)
arrange(to_count_df, desc(n))
stri_rand_strings(100, 10, pattern = "[munich]")
source("packages.r")
